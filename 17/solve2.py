#!/usr/bin/python3

import numpy as np

from code import interact

rocks = [np.asarray([(0, 0), (1, 0), (2, 0), (3, 0)]),
         np.asarray([(0, 1), (1, 1), (2, 1), (1, 2), (1, 0)]),
         np.asarray([(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)]),
         np.asarray([(0, 0), (0, 1), (0, 2), (0, 3)]),
         np.asarray([(0, 0), (1, 0), (0, 1), (1, 1)])]
 
targets = {10000:15842,
           20000:31692,
           30000:47543,
           40000:63390,
           50000:79256,
           60000:95082,
           70000:110936,
           80000:126786,
           90000:142636,
          100000:158499,
          200000:316999,
           98413:155970}


def solve(filename, n_rocks):

    with open(filename) as f_in:
        jets = list(f_in.readline().strip())
        jets = [(ord(char) - ord('='), 0) for char in jets]

        #set of (x, y) tuples indicating occupied indices
        occupied = set((idx, 0) for idx in range(1, 8))

        maxs = [0]

        idx_jets = 0
        idx_rocks = 0
        rock_count = 0
        y_max = 0

        #floor at y=0

        while rock_count < n_rocks:
            rock = rocks[idx_rocks] + (3, y_max + 4) #initial offset
            rock_count += 1

            rock_prime = rock
            
            while not rock_contact(rock_prime, occupied):
                rock = rock_prime

                #test wind movement
                jet = jets[idx_jets]
                idx_jets += 1
                idx_jets %= len(jets)

                rock_prime = rock + jet
                
                if not rock_contact(rock_prime, occupied):
                    rock = rock_prime

                #test vertical movement
                rock_prime = rock + (0, -1)
            
            #add rock to occupied
            for coord in rock:
                occupied.add(tuple(coord))
            
            y_max = max(y_max, rock[:, 1].max())

            idx_rocks += 1
            idx_rocks %= 5

            maxs.append(y_max)
        
        print(y_max)
       

        maxs = np.asarray(maxs)
        diffs = get_diffs(maxs)      
        


        print()
        n_rocks_tmp = n_rocks

        for idx_0, idx_1 in [(1227, 2951), (2952, 4676), (4677, 6401), (6402, 8126), (8127, 9851), (9852, 11576), (11577, 13301), (13302, 15026), (15027, 16751), (16752, 18476), (18477, 20201), (20202, 21926), (21927, 23651), (23652, 25376), (25377, 27101), (27102, 28826), (28827, 30551), (30552, 32276), (32277, 34001), (34002, 35726), (35727, 37451), (37452, 39176), (39177, 40901), (40902, 42626), (42627, 44351), (44352, 46076), (46077, 47801), (47802, 49526), (49527, 51251), (51252, 52976), (52977, 54701), (54702, 56426), (56427, 58151), (58152, 59876), (59877, 61601), (61602, 63326), (63327, 65051), (65052, 66776), (66777, 68501), (68502, 70226), (70227, 71951), (71952, 73676), (73677, 75401), (75402, 77126), (77127, 78851), (78852, 80576), (80577, 82301), (82302, 84026), (84027, 85751), (85752, 87476), (87477, 89201), (89202, 90926), (90927, 92651), (92652, 94376), (94377, 96101), (96102, 97826), (97827, 99551), (99552, 101276), (101277, 103001), (103002, 104726), (104727, 106451), (106452, 108176), (108177, 109901), (109902, 111626), (111627, 113351), (113352, 115076), (115077, 116801), (116802, 118526), (118527, 120251), (120252, 121976), (121977, 123701), (123702, 125426), (125427, 127151), (127152, 128876), (128877, 130601), (130602, 132326), (132327, 134051), (134052, 135776), (135777, 137501), (137502, 139226), (139227, 140951), (140952, 142676), (142677, 144401), (144402, 146126), (146127, 147851), (147852, 149576), (149577, 151301), (151302, 153026), (153027, 154751), (154752, 156476), (156477, 158201), (158202, 159926), (159927, 161651), (161652, 163376), (163377, 165101), (165102, 166826), (166827, 168551), (168552, 170276), (170277, 172001), (172002, 173726), (173727, 175451), (175452, 177176), (177177, 178901), (178902, 180626), (180627, 182351), (182352, 184076), (184077, 185801), (185802, 187526), (187527, 189251), (189252, 190976), (190977, 192701), (192702, 194426), (194427, 196151), (196152, 197876), (197877, 199601), (199602, 201326), (201327, 203051), (203052, 204776), (204777, 206501), (206502, 208226), (208227, 209951), (209952, 211676), (211677, 213401), (213402, 215126), (215127, 216851), (216852, 218576), (218577, 220301), (220302, 222026), (222027, 223751), (223752, 225476), (225477, 227201), (227202, 228926), (228927, 230651), (230652, 232376), (232377, 234101), (234102, 235826), (235827, 237551), (237552, 239276), (239277, 241001), (241002, 242726), (242727, 244451), (244452, 246176), (246177, 247901), (247902, 249626), (249627, 251351), (251352, 253076), (253077, 254801), (254802, 256526), (256527, 258251), (258252, 259976), (259977, 261701), (261702, 263426), (263427, 265151), (265152, 266876), (266877, 268601), (268602, 270326), (270327, 272051), (272052, 273776), (273777, 275501), (275502, 277226), (277227, 278951), (278952, 280676), (280677, 282401), (282402, 284126), (284127, 285851), (285852, 287576), (287577, 289301), (289302, 291026), (291027, 292751), (292752, 294476), (294477, 296201), (296202, 297926), (297927, 299651), (299652, 301376), (301377, 303101), (303102, 304826), (304827, 306551), (306552, 308276), (308277, 310001), (310002, 311726), (311727, 313451), (313452, 315176), (315177, 316901), (316902, 318626), (318627, 320351), (320352, 322076), (322077, 323801), (323802, 325526), (325527, 327251), (327252, 328976), (328977, 330701), (330702, 332426), (332427, 334151), (334152, 335876), (335877, 337601), (337602, 339326), (339327, 341051), (341052, 342776), (342777, 344501), (344502, 346226), (346227, 347951), (347952, 349676), (349677, 351401), (351402, 353126), (353127, 354851), (354852, 356576), (356577, 358301), (358302, 360026), (360027, 361751), (361752, 363476), (363477, 365201), (365202, 366926), (366927, 368651), (368652, 370376), (370377, 372101), (372102, 373826), (373827, 375551), (375552, 377276), (377277, 379001), (379002, 380726), (380727, 382451), (382452, 384176), (384177, 385901), (385902, 387626), (387627, 389351), (389352, 391076), (391077, 392801), (392802, 394526), (394527, 396251), (396252, 397976), (397977, 399701), (399702, 401426), (401427, 403151), (403152, 404876), (404877, 406601), (406602, 408326), (408327, 410051), (410052, 411776), (411777, 413501), (413502, 415226), (415227, 416951), (416952, 418676), (418677, 420401), (420402, 422126), (422127, 423851), (423852, 425576), (425577, 427301), (427302, 429026), (429027, 430751), (430752, 432476), (432477, 434201), (434202, 435926), (435927, 437651), (437652, 439376), (439377, 441101), (441102, 442826), (442827, 444551), (444552, 446276), (446277, 448001), (448002, 449726), (449727, 451451), (451452, 453176), (453177, 454901), (454902, 456626), (456627, 458351), (458352, 460076), (460077, 461801), (461802, 463526), (463527, 465251), (465252, 466976), (466977, 468701), (468702, 470426), (470427, 472151), (472152, 473876), (473877, 475601), (475602, 477326), (477327, 479051), (479052, 480776), (480777, 482501), (482502, 484226), (484227, 485951), (485952, 487676), (487677, 489401), (489402, 491126), (491127, 492851), (492852, 494576), (494577, 496301), (496302, 498026), (498027, 499751), (499752, 501476), (501477, 503201), (503202, 504926), (504927, 506651), (506652, 508376), (508377, 510101), (510102, 511826), (511827, 513551), (513552, 515276), (515277, 517001), (517002, 518726), (518727, 520451), (520452, 522176), (522177, 523901), (523902, 525626), (525627, 527351), (527352, 529076), (529077, 530801), (530802, 532526), (532527, 534251), (534252, 535976), (535977, 537701), (537702, 539426), (539427, 541151), (541152, 542876), (542877, 544601), (544602, 546326), (546327, 548051), (548052, 549776), (549777, 551501), (551502, 553226), (553227, 554951), (554952, 556676), (556677, 558401), (558402, 560126), (560127, 561851), (561852, 563576), (563577, 565301), (565302, 567026), (567027, 568751), (568752, 570476), (570477, 572201), (572202, 573926), (573927, 575651), (575652, 577376), (577377, 579101), (579102, 580826), (580827, 582551), (582552, 584276), (584277, 586001), (586002, 587726), (587727, 589451), (589452, 591176), (591177, 592901), (592902, 594626), (594627, 596351), (596352, 598076), (598077, 599801), (599802, 601526), (601527, 603251), (603252, 604976), (604977, 606701), (606702, 608426), (608427, 610151), (610152, 611876), (611877, 613601), (613602, 615326), (615327, 617051), (617052, 618776), (618777, 620501), (620502, 622226), (622227, 623951), (623952, 625676), (625677, 627401), (627402, 629126), (629127, 630851), (630852, 632576), (632577, 634301), (634302, 636026), (636027, 637751), (637752, 639476), (639477, 641201), (641202, 642926), (642927, 644651), (644652, 646376), (646377, 648101), (648102, 649826), (649827, 651551), (651552, 653276), (653277, 655001), (655002, 656726), (656727, 658451), (658452, 660176), (660177, 661901), (661902, 663626), (663627, 665351), (665352, 667076), (667077, 668801), (668802, 670526), (670527, 672251), (672252, 673976), (673977, 675701), (675702, 677426), (677427, 679151), (679152, 680876), (680877, 682601), (682602, 684326), (684327, 686051), (686052, 687776), (687777, 689501), (689502, 691226), (691227, 692951), (692952, 694676), (694677, 696401), (696402, 698126), (698127, 699851), (699852, 701576), (701577, 703301), (703302, 705026), (705027, 706751), (706752, 708476), (708477, 710201), (710202, 711926), (711927, 713651), (713652, 715376), (715377, 717101), (717102, 718826), (718827, 720551), (720552, 722276), (722277, 724001), (724002, 725726), (725727, 727451), (727452, 729176), (729177, 730901), (730902, 732626), (732627, 734351), (734352, 736076), (736077, 737801), (737802, 739526), (739527, 741251), (741252, 742976), (742977, 744701), (744702, 746426), (746427, 748151), (748152, 749876), (749877, 751601), (751602, 753326), (753327, 755051), (755052, 756776), (756777, 758501), (758502, 760226), (760227, 761951), (761952, 763676), (763677, 765401), (765402, 767126), (767127, 768851), (768852, 770576), (770577, 772301), (772302, 774026), (774027, 775751), (775752, 777476), (777477, 779201), (779202, 780926), (780927, 782651), (782652, 784376), (784377, 786101), (786102, 787826), (787827, 789551), (789552, 791276), (791277, 793001), (793002, 794726), (794727, 796451), (796452, 798176), (798177, 799901), (799902, 801626), (801627, 803351), (803352, 805076), (805077, 806801), (806802, 808526), (808527, 810251), (810252, 811976), (811977, 813701), (813702, 815426), (815427, 817151), (817152, 818876), (818877, 820601), (820602, 822326), (822327, 824051), (824052, 825776), (825777, 827501), (827502, 829226), (829227, 830951), (830952, 832676), (832677, 834401), (834402, 836126), (836127, 837851), (837852, 839576), (839577, 841301), (841302, 843026), (843027, 844751), (844752, 846476), (846477, 848201), (848202, 849926), (849927, 851651), (851652, 853376), (853377, 855101), (855102, 856826), (856827, 858551), (858552, 860276), (860277, 862001), (862002, 863726), (863727, 865451), (865452, 867176), (867177, 868901), (868902, 870626), (870627, 872351), (872352, 874076), (874077, 875801), (875802, 877526), (877527, 879251), (879252, 880976), (880977, 882701), (882702, 884426), (884427, 886151), (886152, 887876), (887877, 889601), (889602, 891326), (891327, 893051), (893052, 894776), (894777, 896501), (896502, 898226), (898227, 899951), (899952, 901676), (901677, 903401), (903402, 905126), (905127, 906851), (906852, 908576), (908577, 910301), (910302, 912026), (912027, 913751), (913752, 915476), (915477, 917201), (917202, 918926), (918927, 920651), (920652, 922376), (922377, 924101), (924102, 925826), (925827, 927551), (927552, 929276), (929277, 931001), (931002, 932726), (932727, 934451), (934452, 936176), (936177, 937901), (937902, 939626), (939627, 941351), (941352, 943076), (943077, 944801), (944802, 946526), (946527, 948251), (948252, 949976), (949977, 951701), (951702, 953426), (953427, 955151), (955152, 956876), (956877, 958601), (958602, 960326), (960327, 962051), (962052, 963776), (963777, 965501), (965502, 967226), (967227, 968951), (968952, 970676), (970677, 972401), (972402, 974126), (974127, 975851), (975852, 977576), (977577, 979301), (979302, 981026), (981027, 982751), (982752, 984476), (984477, 986201), (986202, 987926), (987927, 989651), (989652, 991376), (991377, 993101), (993102, 994826), (994827, 996551), (996552, 998276), (998277, 1000001)]:
            if idx_1 >= diffs.shape[0]:
                break

            part_1 = diffs[idx_0 : idx_1 + 1]
            for n_rocks in targets.keys():    
                n_full_sequences = (n_rocks - idx_0) // part_1.shape[0]
                len_partial_sequence = (n_rocks - idx_0) % part_1.shape[0]

                y_max_1 = maxs[idx_0 - 1] + \
                          (n_full_sequences * sum(diffs[idx_0 : idx_1 + 1])) + \
                          sum(diffs[idx_0 : idx_0 + len_partial_sequence + 1])

                print(targets[n_rocks])
                print(y_max_1)
                print()

            n_rocks = 1000000000000
            n_full_sequences = (n_rocks - idx_0) // part_1.shape[0]
            len_partial_sequence = (n_rocks - idx_0) % part_1.shape[0]

            y_max_1 = maxs[idx_0 - 1] + \
                      (n_full_sequences * sum(diffs[idx_0 : idx_1 + 1])) + \
                      sum(diffs[idx_0 : idx_0 + len_partial_sequence])


            #y_max_1 = maxs[idx_0 - 1] + (n_full_sequences * (maxs[idx_1] - maxs[idx_0 - 1])) + sum(diffs[idx_0 : idx_0 + len_partial_sequence])


            print(y_max_1)
            print()
        interact(local=locals())
        repeated_substring(diffs)


def get_diffs(maxs):
    diffs = np.zeros_like(maxs)
    
    for idx in range(1, len(maxs)):
        diffs[idx] = maxs[idx] - maxs[idx - 1]

    return diffs


def repeated_substring(diffs):
    #returns start/end index of the first occurrence of the longest repeated substring

    n = 2

    for jdx in range(2, diffs.shape[0]):
        n = jdx
        print(f"jdx:  {jdx}")
        seq_indices = []
        part_0, part_1 = diffs[:-n], diffs[-n:]

        #find indices of initial overlap
        idx_0 = 0

        while idx_0 <=(diffs.shape[0] - n):
            idx_1 = idx_0 + n
            
            if all(diffs[idx_0 : idx_1] == part_1):
                seq_indices.append((idx_0, idx_1))
                idx_0 = idx_1 + 1

            else:
                idx_0 += 1

        print(seq_indices)
        if all([seq_indices[idx - 1][1] == seq_indices[idx][0] - 1 for idx in range(1, len(seq_indices))]):
            break

#    while diffs[idx_0 - 1] == diffs[jdx_0 - 1] and \
#          (jdx_0 - 1) != idx_1:
#        idx_0 -= 1
#        jdx_0 -= 1

    
    #interact(local=locals())
    return seq_indices[0][0], seq_indices[0][1]


def print_rocks(occupied, y_max):
    for idx in range(y_max + 1, 0, -1):

        row = '|'

        for jdx in range(1, 8):
            if (jdx, idx) in occupied:
                row += '#'
            else:
                row += '.'

        row += '|'
        print(row)
    print("+-------+")


def rock_contact(rock_prime, occupied):
    #return true if any portion of the rock overlaps another rock or is out of range

    for coord in rock_prime:
        if (coord[0], coord[1]) in occupied or \
           coord[0] == 0 or coord[0] == 8   :
            return True

    return False


if __name__ == "__main__":
    #solve("test_input.txt", 2022)
    #solve("input.txt", 2022)

    #solve("test_input.txt", 1000)
    #solve("test_input.txt", 2000)
    #solve("test_input.txt", 3000)
    #solve("test_input.txt", 4000)
    #solve("test_input.txt", 5000)
    
    solve("input.txt", 10000)
    #solve("input.txt", 20000)
    #solve("input.txt", 30000)
    #solve("input.txt", 40000)
    #solve("input.txt", 50000)
    #solve("input.txt", 60000)
    #solve("input.txt", 70000)
    #solve("input.txt", 80000)
    #solve("input.txt", 90000)
    #solve("input.txt", 100000)
    #solve("input.txt", 200000)
    #solve("input.txt", 98413)
